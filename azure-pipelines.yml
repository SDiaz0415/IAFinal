trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  dockerHubServiceConnection: 'DockerHubConnection'
  dockerHubUsername: 'sdiaz15'
  backendImageName: 'sdiaz15/backend'
  frontendImageName: 'sdiaz15/frontend'
  ollamaImageName: 'ollama/ollama'  # Imagen oficial de Ollama
  aksClusterName: 'mi-cluster-aks'
  resourceGroup: 'grupo-k8s'

stages:
- stage: BuildAndPush
  displayName: "Build and Push to Docker Hub"
  jobs:
  - job: Build
    displayName: "Build Docker Images"
    steps:
    - task: Docker@2
      displayName: "Login to Docker Hub"
      inputs:
        command: login
        containerRegistry: $(dockerHubServiceConnection)

    - task: Docker@2
      displayName: "Build Backend Image"
      inputs:
        command: build
        Dockerfile: backend/Dockerfile
        repository: $(backendImageName)
        tags: latest

    - task: Docker@2
      displayName: "Build Frontend Image"
      inputs:
        command: build
        Dockerfile: frontend/Dockerfile
        repository: $(frontendImageName)
        tags: latest

    - task: Docker@2
      displayName: "Push Backend Image to Docker Hub"
      inputs:
        command: push
        repository: $(backendImageName)
        tags: latest

    - task: Docker@2
      displayName: "Push Frontend Image to Docker Hub"
      inputs:
        command: push
        repository: $(frontendImageName)
        tags: latest

- stage: DeployToAKS
  displayName: "Deploy to AKS"
  jobs:
  - job: Deploy
    displayName: "Create AKS and Deploy"
    steps:
    - task: AzureCLI@2
      displayName: "Create AKS Cluster"
      inputs:
        azureSubscription: 'AzureServiceConnection'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az aks show --resource-group $(resourceGroup) --name $(aksClusterName) || \
          az aks create --resource-group $(resourceGroup) --name $(aksClusterName) --node-count 2 --generate-ssh-keys

    - task: AzureCLI@2
      displayName: "Configure kubectl"
      inputs:
        azureSubscription: 'AzureServiceConnection'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az aks get-credentials --resource-group $(resourceGroup) --name $(aksClusterName) --admin
          kubectl config current-context

    - task: Kubernetes@1
      displayName: "Deploy to AKS using kubectl"
      inputs:
        connectionType: 'None'  # No usamos una conexi√≥n manual, sino la credencial obtenida
        command: 'apply'
        arguments: '-f k8s/'

